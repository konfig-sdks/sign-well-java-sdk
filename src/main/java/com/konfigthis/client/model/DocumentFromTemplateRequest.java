/*
 * Resources and endpoints
 * When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support — whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AdditionalFieldsMapInnerInner;
import com.konfigthis.client.model.AdditionalFilesMapInner;
import com.konfigthis.client.model.AttachmentRequestsMapInner;
import com.konfigthis.client.model.CopiedContactsMapInner;
import com.konfigthis.client.model.TemplateFieldsMapInner;
import com.konfigthis.client.model.TemplateRecipientsMapInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DocumentFromTemplateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DocumentFromTemplateRequest {
  public static final String SERIALIZED_NAME_TEST_MODE = "test_mode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  private Boolean testMode = false;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private UUID templateId;

  public static final String SERIALIZED_NAME_TEMPLATE_IDS = "template_ids";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_IDS)
  private List<String> templateIds = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<TemplateRecipientsMapInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft = false;

  public static final String SERIALIZED_NAME_WITH_SIGNATURE_PAGE = "with_signature_page";
  @SerializedName(SERIALIZED_NAME_WITH_SIGNATURE_PAGE)
  private Boolean withSignaturePage = false;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn;

  public static final String SERIALIZED_NAME_REMINDERS = "reminders";
  @SerializedName(SERIALIZED_NAME_REMINDERS)
  private Boolean reminders = true;

  public static final String SERIALIZED_NAME_APPLY_SIGNING_ORDER = "apply_signing_order";
  @SerializedName(SERIALIZED_NAME_APPLY_SIGNING_ORDER)
  private Boolean applySigningOrder = false;

  public static final String SERIALIZED_NAME_API_APPLICATION_ID = "api_application_id";
  @SerializedName(SERIALIZED_NAME_API_APPLICATION_ID)
  private UUID apiApplicationId;

  public static final String SERIALIZED_NAME_EMBEDDED_SIGNING = "embedded_signing";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_SIGNING)
  private Boolean embeddedSigning = false;

  public static final String SERIALIZED_NAME_EMBEDDED_SIGNING_NOTIFICATIONS = "embedded_signing_notifications";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_SIGNING_NOTIFICATIONS)
  private Boolean embeddedSigningNotifications = false;

  public static final String SERIALIZED_NAME_TEXT_TAGS = "text_tags";
  @SerializedName(SERIALIZED_NAME_TEXT_TAGS)
  private Boolean textTags = false;

  public static final String SERIALIZED_NAME_CUSTOM_REQUESTER_NAME = "custom_requester_name";
  @SerializedName(SERIALIZED_NAME_CUSTOM_REQUESTER_NAME)
  private String customRequesterName;

  public static final String SERIALIZED_NAME_CUSTOM_REQUESTER_EMAIL = "custom_requester_email";
  @SerializedName(SERIALIZED_NAME_CUSTOM_REQUESTER_EMAIL)
  private String customRequesterEmail;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_ALLOW_DECLINE = "allow_decline";
  @SerializedName(SERIALIZED_NAME_ALLOW_DECLINE)
  private Boolean allowDecline = true;

  public static final String SERIALIZED_NAME_ALLOW_REASSIGN = "allow_reassign";
  @SerializedName(SERIALIZED_NAME_ALLOW_REASSIGN)
  private Boolean allowReassign = true;

  public static final String SERIALIZED_NAME_DECLINE_REDIRECT_URL = "decline_redirect_url";
  @SerializedName(SERIALIZED_NAME_DECLINE_REDIRECT_URL)
  private String declineRedirectUrl;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_TEMPLATE_FIELDS = "template_fields";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_FIELDS)
  private List<TemplateFieldsMapInner> templateFields = null;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<AdditionalFilesMapInner> files = null;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<List<AdditionalFieldsMapInnerInner>> fields = null;

  public static final String SERIALIZED_NAME_ATTACHMENT_REQUESTS = "attachment_requests";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_REQUESTS)
  private List<AttachmentRequestsMapInner> attachmentRequests = null;

  public static final String SERIALIZED_NAME_COPIED_CONTACTS = "copied_contacts";
  @SerializedName(SERIALIZED_NAME_COPIED_CONTACTS)
  private List<CopiedContactsMapInner> copiedContacts = null;

  public DocumentFromTemplateRequest() {
  }

  public DocumentFromTemplateRequest testMode(Boolean testMode) {
    
    
    
    
    this.testMode = testMode;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; to enable Test Mode. Documents created with Test Mode do not count towards API billing and are not legally binding. Defaults to &#x60;false&#x60;
   * @return testMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Set to `true` to enable Test Mode. Documents created with Test Mode do not count towards API billing and are not legally binding. Defaults to `false`")

  public Boolean getTestMode() {
    return testMode;
  }


  public void setTestMode(Boolean testMode) {
    
    
    
    this.testMode = testMode;
  }


  public DocumentFromTemplateRequest templateId(UUID templateId) {
    
    
    
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Use when you have to create a document from a single template. Either :template_id or :template_ids must be present in the request, not both.
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use when you have to create a document from a single template. Either :template_id or :template_ids must be present in the request, not both.")

  public UUID getTemplateId() {
    return templateId;
  }


  public void setTemplateId(UUID templateId) {
    
    
    
    this.templateId = templateId;
  }


  public DocumentFromTemplateRequest templateIds(List<String> templateIds) {
    
    
    
    
    this.templateIds = templateIds;
    return this;
  }

  public DocumentFromTemplateRequest addTemplateIdsItem(String templateIdsItem) {
    if (this.templateIds == null) {
      this.templateIds = new ArrayList<>();
    }
    this.templateIds.add(templateIdsItem);
    return this;
  }

   /**
   * Use when you have to create a document from multiple templates. Either :template_id or :template_ids must be present in the request, not both.
   * @return templateIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use when you have to create a document from multiple templates. Either :template_id or :template_ids must be present in the request, not both.")

  public List<String> getTemplateIds() {
    return templateIds;
  }


  public void setTemplateIds(List<String> templateIds) {
    
    
    
    this.templateIds = templateIds;
  }


  public DocumentFromTemplateRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the document.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the document.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DocumentFromTemplateRequest subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject (if the document is created from a template).
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject (if the document is created from a template).")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public DocumentFromTemplateRequest message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * Email message for the signature request that recipients will see. Defaults to the default system message or a template message (if the document is created from a template).
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email message for the signature request that recipients will see. Defaults to the default system message or a template message (if the document is created from a template).")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public DocumentFromTemplateRequest recipients(List<TemplateRecipientsMapInner> recipients) {
    
    
    
    
    this.recipients = recipients;
    return this;
  }

  public DocumentFromTemplateRequest addRecipientsItem(TemplateRecipientsMapInner recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Document recipients are people that must complete and/or sign a document. Recipients of the document must be assigned to a placeholder of the template. Recipients will inherit all placeholder fields and settings.
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Document recipients are people that must complete and/or sign a document. Recipients of the document must be assigned to a placeholder of the template. Recipients will inherit all placeholder fields and settings.")

  public List<TemplateRecipientsMapInner> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<TemplateRecipientsMapInner> recipients) {
    
    
    
    this.recipients = recipients;
  }


  public DocumentFromTemplateRequest draft(Boolean draft) {
    
    
    
    
    this.draft = draft;
    return this;
  }

   /**
   * Whether the document can still be updated before sending a signature request. If set to &#x60;false&#x60; the document is sent for signing as part of this request. Defaults to &#x60;false&#x60;.
   * @return draft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the document can still be updated before sending a signature request. If set to `false` the document is sent for signing as part of this request. Defaults to `false`.")

  public Boolean getDraft() {
    return draft;
  }


  public void setDraft(Boolean draft) {
    
    
    
    this.draft = draft;
  }


  public DocumentFromTemplateRequest withSignaturePage(Boolean withSignaturePage) {
    
    
    
    
    this.withSignaturePage = withSignaturePage;
    return this;
  }

   /**
   * When set to &#x60;true&#x60; the document will have a signature page added to the end, and all signers will be required to add their signature on that page.
   * @return withSignaturePage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "When set to `true` the document will have a signature page added to the end, and all signers will be required to add their signature on that page.")

  public Boolean getWithSignaturePage() {
    return withSignaturePage;
  }


  public void setWithSignaturePage(Boolean withSignaturePage) {
    
    
    
    this.withSignaturePage = withSignaturePage;
  }


  public DocumentFromTemplateRequest expiresIn(Integer expiresIn) {
    if (expiresIn != null && expiresIn < 1) {
      throw new IllegalArgumentException("Invalid value for expiresIn. Must be greater than or equal to 1.");
    }
    
    
    
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * Number of days before the signature request expires. Defaults to the account expiration setting or template expiration (if the document is created from a template).
   * minimum: 1
   * @return expiresIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of days before the signature request expires. Defaults to the account expiration setting or template expiration (if the document is created from a template).")

  public Integer getExpiresIn() {
    return expiresIn;
  }


  public void setExpiresIn(Integer expiresIn) {
    if (expiresIn != null && expiresIn < 1) {
      throw new IllegalArgumentException("Invalid value for expiresIn. Must be greater than or equal to 1.");
    }
    
    
    this.expiresIn = expiresIn;
  }


  public DocumentFromTemplateRequest reminders(Boolean reminders) {
    
    
    
    
    this.reminders = reminders;
    return this;
  }

   /**
   * Whether to send signing reminders to recipients. Reminders are sent on day 3, day 6, and day 10 if set to &#x60;true&#x60;. Defaults to &#x60;true&#x60;.
   * @return reminders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send signing reminders to recipients. Reminders are sent on day 3, day 6, and day 10 if set to `true`. Defaults to `true`.")

  public Boolean getReminders() {
    return reminders;
  }


  public void setReminders(Boolean reminders) {
    
    
    
    this.reminders = reminders;
  }


  public DocumentFromTemplateRequest applySigningOrder(Boolean applySigningOrder) {
    
    
    
    
    this.applySigningOrder = applySigningOrder;
    return this;
  }

   /**
   * When set to &#x60;true&#x60; recipients will sign one at a time in the order of the &#x60;recipients&#x60; collection of this request.
   * @return applySigningOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "When set to `true` recipients will sign one at a time in the order of the `recipients` collection of this request.")

  public Boolean getApplySigningOrder() {
    return applySigningOrder;
  }


  public void setApplySigningOrder(Boolean applySigningOrder) {
    
    
    
    this.applySigningOrder = applySigningOrder;
  }


  public DocumentFromTemplateRequest apiApplicationId(UUID apiApplicationId) {
    
    
    
    
    this.apiApplicationId = apiApplicationId;
    return this;
  }

   /**
   * Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings
   * @return apiApplicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings")

  public UUID getApiApplicationId() {
    return apiApplicationId;
  }


  public void setApiApplicationId(UUID apiApplicationId) {
    
    
    
    this.apiApplicationId = apiApplicationId;
  }


  public DocumentFromTemplateRequest embeddedSigning(Boolean embeddedSigning) {
    
    
    
    
    this.embeddedSigning = embeddedSigning;
    return this;
  }

   /**
   * When set to &#x60;true&#x60; it enables embedded signing in your website/web application. Embedded functionality works with an iFrame and email authentication is disabled. :embedded_signinig defaults to &#x60;false&#x60;.
   * @return embeddedSigning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "When set to `true` it enables embedded signing in your website/web application. Embedded functionality works with an iFrame and email authentication is disabled. :embedded_signinig defaults to `false`.")

  public Boolean getEmbeddedSigning() {
    return embeddedSigning;
  }


  public void setEmbeddedSigning(Boolean embeddedSigning) {
    
    
    
    this.embeddedSigning = embeddedSigning;
  }


  public DocumentFromTemplateRequest embeddedSigningNotifications(Boolean embeddedSigningNotifications) {
    
    
    
    
    this.embeddedSigningNotifications = embeddedSigningNotifications;
    return this;
  }

   /**
   * On embedding signing, document owners (and CC&#39;d contacts) do not get a notification email when documents have been completed. Setting this param to &#x60;true&#x60; will send out those final completed notifications. Default is &#x60;false&#x60;
   * @return embeddedSigningNotifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "On embedding signing, document owners (and CC'd contacts) do not get a notification email when documents have been completed. Setting this param to `true` will send out those final completed notifications. Default is `false`")

  public Boolean getEmbeddedSigningNotifications() {
    return embeddedSigningNotifications;
  }


  public void setEmbeddedSigningNotifications(Boolean embeddedSigningNotifications) {
    
    
    
    this.embeddedSigningNotifications = embeddedSigningNotifications;
  }


  public DocumentFromTemplateRequest textTags(Boolean textTags) {
    
    
    
    
    this.textTags = textTags;
    return this;
  }

   /**
   * An alternative way (if you can’t use the recommended way) of placing fields in specific locations of your document by using special text tags. Useful when changing the content of your files changes the location of fields. See API documentation for “Text Tags” for details. Defaults to false.
   * @return textTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "An alternative way (if you can’t use the recommended way) of placing fields in specific locations of your document by using special text tags. Useful when changing the content of your files changes the location of fields. See API documentation for “Text Tags” for details. Defaults to false.")

  public Boolean getTextTags() {
    return textTags;
  }


  public void setTextTags(Boolean textTags) {
    
    
    
    this.textTags = textTags;
  }


  public DocumentFromTemplateRequest customRequesterName(String customRequesterName) {
    
    
    
    
    this.customRequesterName = customRequesterName;
    return this;
  }

   /**
   * Sets the custom requester name for the document. When set, this is the name used for all email communications, signing notifications, and in the audit file.
   * @return customRequesterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sets the custom requester name for the document. When set, this is the name used for all email communications, signing notifications, and in the audit file.")

  public String getCustomRequesterName() {
    return customRequesterName;
  }


  public void setCustomRequesterName(String customRequesterName) {
    
    
    
    this.customRequesterName = customRequesterName;
  }


  public DocumentFromTemplateRequest customRequesterEmail(String customRequesterEmail) {
    
    
    
    
    this.customRequesterEmail = customRequesterEmail;
    return this;
  }

   /**
   * Sets the custom requester email for the document. When set, this is the email used for all email communications, signing notifications, and in the audit file.
   * @return customRequesterEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sets the custom requester email for the document. When set, this is the email used for all email communications, signing notifications, and in the audit file.")

  public String getCustomRequesterEmail() {
    return customRequesterEmail;
  }


  public void setCustomRequesterEmail(String customRequesterEmail) {
    
    
    
    this.customRequesterEmail = customRequesterEmail;
  }


  public DocumentFromTemplateRequest redirectUrl(String redirectUrl) {
    
    
    
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * A URL that recipients are redirected to after successfully signing a document.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A URL that recipients are redirected to after successfully signing a document.")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    
    this.redirectUrl = redirectUrl;
  }


  public DocumentFromTemplateRequest allowDecline(Boolean allowDecline) {
    
    
    
    
    this.allowDecline = allowDecline;
    return this;
  }

   /**
   * Whether to allow recipients the option to decline signing a document. If multiple signers are involved in a document, any single recipient can cancel the entire document signing process by declining to sign.
   * @return allowDecline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to allow recipients the option to decline signing a document. If multiple signers are involved in a document, any single recipient can cancel the entire document signing process by declining to sign.")

  public Boolean getAllowDecline() {
    return allowDecline;
  }


  public void setAllowDecline(Boolean allowDecline) {
    
    
    
    this.allowDecline = allowDecline;
  }


  public DocumentFromTemplateRequest allowReassign(Boolean allowReassign) {
    
    
    
    
    this.allowReassign = allowReassign;
    return this;
  }

   /**
   * In some cases a signer is not the right person to sign and may need to reassign their signing responsibilities to another person. This feature allows them to reassign the document to someone else.
   * @return allowReassign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "In some cases a signer is not the right person to sign and may need to reassign their signing responsibilities to another person. This feature allows them to reassign the document to someone else.")

  public Boolean getAllowReassign() {
    return allowReassign;
  }


  public void setAllowReassign(Boolean allowReassign) {
    
    
    
    this.allowReassign = allowReassign;
  }


  public DocumentFromTemplateRequest declineRedirectUrl(String declineRedirectUrl) {
    
    
    
    
    this.declineRedirectUrl = declineRedirectUrl;
    return this;
  }

   /**
   * A URL that recipients are redirected to if the document is declined.
   * @return declineRedirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A URL that recipients are redirected to if the document is declined.")

  public String getDeclineRedirectUrl() {
    return declineRedirectUrl;
  }


  public void setDeclineRedirectUrl(String declineRedirectUrl) {
    
    
    
    this.declineRedirectUrl = declineRedirectUrl;
  }


  public DocumentFromTemplateRequest metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Optional key-value data that can be associated with the document. If set, will be available every time the document data is returned.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional key-value data that can be associated with the document. If set, will be available every time the document data is returned.")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public DocumentFromTemplateRequest templateFields(List<TemplateFieldsMapInner> templateFields) {
    
    
    
    
    this.templateFields = templateFields;
    return this;
  }

  public DocumentFromTemplateRequest addTemplateFieldsItem(TemplateFieldsMapInner templateFieldsItem) {
    if (this.templateFields == null) {
      this.templateFields = new ArrayList<>();
    }
    this.templateFields.add(templateFieldsItem);
    return this;
  }

   /**
   * Fields of your template(s) that you can prepopulate with values. Signature and Initials fields cannot be signed through the API.
   * @return templateFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fields of your template(s) that you can prepopulate with values. Signature and Initials fields cannot be signed through the API.")

  public List<TemplateFieldsMapInner> getTemplateFields() {
    return templateFields;
  }


  public void setTemplateFields(List<TemplateFieldsMapInner> templateFields) {
    
    
    
    this.templateFields = templateFields;
  }


  public DocumentFromTemplateRequest files(List<AdditionalFilesMapInner> files) {
    
    
    
    
    this.files = files;
    return this;
  }

  public DocumentFromTemplateRequest addFilesItem(AdditionalFilesMapInner filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AdditionalFilesMapInner> getFiles() {
    return files;
  }


  public void setFiles(List<AdditionalFilesMapInner> files) {
    
    
    
    this.files = files;
  }


  public DocumentFromTemplateRequest fields(List<List<AdditionalFieldsMapInnerInner>> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public DocumentFromTemplateRequest addFieldsItem(List<AdditionalFieldsMapInnerInner> fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Fields to be added to any appended files (not existing files). Document fields placed on a document for collecting data or signatures from recipients. Field data should be sent as a 2-dimensional JSON array. One array of fields is needed for each file in the files array. An array of fields can be empty if you have a file that does not contain any fields.
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fields to be added to any appended files (not existing files). Document fields placed on a document for collecting data or signatures from recipients. Field data should be sent as a 2-dimensional JSON array. One array of fields is needed for each file in the files array. An array of fields can be empty if you have a file that does not contain any fields.")

  public List<List<AdditionalFieldsMapInnerInner>> getFields() {
    return fields;
  }


  public void setFields(List<List<AdditionalFieldsMapInnerInner>> fields) {
    
    
    
    this.fields = fields;
  }


  public DocumentFromTemplateRequest attachmentRequests(List<AttachmentRequestsMapInner> attachmentRequests) {
    
    
    
    
    this.attachmentRequests = attachmentRequests;
    return this;
  }

  public DocumentFromTemplateRequest addAttachmentRequestsItem(AttachmentRequestsMapInner attachmentRequestsItem) {
    if (this.attachmentRequests == null) {
      this.attachmentRequests = new ArrayList<>();
    }
    this.attachmentRequests.add(attachmentRequestsItem);
    return this;
  }

   /**
   * Attachments that a recipient must upload to complete the signing process. Attachment requests are shown after all document fields have been completed.
   * @return attachmentRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attachments that a recipient must upload to complete the signing process. Attachment requests are shown after all document fields have been completed.")

  public List<AttachmentRequestsMapInner> getAttachmentRequests() {
    return attachmentRequests;
  }


  public void setAttachmentRequests(List<AttachmentRequestsMapInner> attachmentRequests) {
    
    
    
    this.attachmentRequests = attachmentRequests;
  }


  public DocumentFromTemplateRequest copiedContacts(List<CopiedContactsMapInner> copiedContacts) {
    
    
    
    
    this.copiedContacts = copiedContacts;
    return this;
  }

  public DocumentFromTemplateRequest addCopiedContactsItem(CopiedContactsMapInner copiedContactsItem) {
    if (this.copiedContacts == null) {
      this.copiedContacts = new ArrayList<>();
    }
    this.copiedContacts.add(copiedContactsItem);
    return this;
  }

   /**
   * Copied contacts are emailed the final document once it has been completed by all recipients.
   * @return copiedContacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Copied contacts are emailed the final document once it has been completed by all recipients.")

  public List<CopiedContactsMapInner> getCopiedContacts() {
    return copiedContacts;
  }


  public void setCopiedContacts(List<CopiedContactsMapInner> copiedContacts) {
    
    
    
    this.copiedContacts = copiedContacts;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DocumentFromTemplateRequest instance itself
   */
  public DocumentFromTemplateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentFromTemplateRequest documentFromTemplateRequest = (DocumentFromTemplateRequest) o;
    return Objects.equals(this.testMode, documentFromTemplateRequest.testMode) &&
        Objects.equals(this.templateId, documentFromTemplateRequest.templateId) &&
        Objects.equals(this.templateIds, documentFromTemplateRequest.templateIds) &&
        Objects.equals(this.name, documentFromTemplateRequest.name) &&
        Objects.equals(this.subject, documentFromTemplateRequest.subject) &&
        Objects.equals(this.message, documentFromTemplateRequest.message) &&
        Objects.equals(this.recipients, documentFromTemplateRequest.recipients) &&
        Objects.equals(this.draft, documentFromTemplateRequest.draft) &&
        Objects.equals(this.withSignaturePage, documentFromTemplateRequest.withSignaturePage) &&
        Objects.equals(this.expiresIn, documentFromTemplateRequest.expiresIn) &&
        Objects.equals(this.reminders, documentFromTemplateRequest.reminders) &&
        Objects.equals(this.applySigningOrder, documentFromTemplateRequest.applySigningOrder) &&
        Objects.equals(this.apiApplicationId, documentFromTemplateRequest.apiApplicationId) &&
        Objects.equals(this.embeddedSigning, documentFromTemplateRequest.embeddedSigning) &&
        Objects.equals(this.embeddedSigningNotifications, documentFromTemplateRequest.embeddedSigningNotifications) &&
        Objects.equals(this.textTags, documentFromTemplateRequest.textTags) &&
        Objects.equals(this.customRequesterName, documentFromTemplateRequest.customRequesterName) &&
        Objects.equals(this.customRequesterEmail, documentFromTemplateRequest.customRequesterEmail) &&
        Objects.equals(this.redirectUrl, documentFromTemplateRequest.redirectUrl) &&
        Objects.equals(this.allowDecline, documentFromTemplateRequest.allowDecline) &&
        Objects.equals(this.allowReassign, documentFromTemplateRequest.allowReassign) &&
        Objects.equals(this.declineRedirectUrl, documentFromTemplateRequest.declineRedirectUrl) &&
        Objects.equals(this.metadata, documentFromTemplateRequest.metadata) &&
        Objects.equals(this.templateFields, documentFromTemplateRequest.templateFields) &&
        Objects.equals(this.files, documentFromTemplateRequest.files) &&
        Objects.equals(this.fields, documentFromTemplateRequest.fields) &&
        Objects.equals(this.attachmentRequests, documentFromTemplateRequest.attachmentRequests) &&
        Objects.equals(this.copiedContacts, documentFromTemplateRequest.copiedContacts)&&
        Objects.equals(this.additionalProperties, documentFromTemplateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testMode, templateId, templateIds, name, subject, message, recipients, draft, withSignaturePage, expiresIn, reminders, applySigningOrder, apiApplicationId, embeddedSigning, embeddedSigningNotifications, textTags, customRequesterName, customRequesterEmail, redirectUrl, allowDecline, allowReassign, declineRedirectUrl, metadata, templateFields, files, fields, attachmentRequests, copiedContacts, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentFromTemplateRequest {\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateIds: ").append(toIndentedString(templateIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    withSignaturePage: ").append(toIndentedString(withSignaturePage)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    reminders: ").append(toIndentedString(reminders)).append("\n");
    sb.append("    applySigningOrder: ").append(toIndentedString(applySigningOrder)).append("\n");
    sb.append("    apiApplicationId: ").append(toIndentedString(apiApplicationId)).append("\n");
    sb.append("    embeddedSigning: ").append(toIndentedString(embeddedSigning)).append("\n");
    sb.append("    embeddedSigningNotifications: ").append(toIndentedString(embeddedSigningNotifications)).append("\n");
    sb.append("    textTags: ").append(toIndentedString(textTags)).append("\n");
    sb.append("    customRequesterName: ").append(toIndentedString(customRequesterName)).append("\n");
    sb.append("    customRequesterEmail: ").append(toIndentedString(customRequesterEmail)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    allowDecline: ").append(toIndentedString(allowDecline)).append("\n");
    sb.append("    allowReassign: ").append(toIndentedString(allowReassign)).append("\n");
    sb.append("    declineRedirectUrl: ").append(toIndentedString(declineRedirectUrl)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    templateFields: ").append(toIndentedString(templateFields)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    attachmentRequests: ").append(toIndentedString(attachmentRequests)).append("\n");
    sb.append("    copiedContacts: ").append(toIndentedString(copiedContacts)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("test_mode");
    openapiFields.add("template_id");
    openapiFields.add("template_ids");
    openapiFields.add("name");
    openapiFields.add("subject");
    openapiFields.add("message");
    openapiFields.add("recipients");
    openapiFields.add("draft");
    openapiFields.add("with_signature_page");
    openapiFields.add("expires_in");
    openapiFields.add("reminders");
    openapiFields.add("apply_signing_order");
    openapiFields.add("api_application_id");
    openapiFields.add("embedded_signing");
    openapiFields.add("embedded_signing_notifications");
    openapiFields.add("text_tags");
    openapiFields.add("custom_requester_name");
    openapiFields.add("custom_requester_email");
    openapiFields.add("redirect_url");
    openapiFields.add("allow_decline");
    openapiFields.add("allow_reassign");
    openapiFields.add("decline_redirect_url");
    openapiFields.add("metadata");
    openapiFields.add("template_fields");
    openapiFields.add("files");
    openapiFields.add("fields");
    openapiFields.add("attachment_requests");
    openapiFields.add("copied_contacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recipients");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentFromTemplateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentFromTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentFromTemplateRequest is not found in the empty JSON string", DocumentFromTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentFromTemplateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("template_ids") != null && !jsonObj.get("template_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_ids` to be an array in the JSON string but got `%s`", jsonObj.get("template_ids").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }

      JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
      // validate the required field `recipients` (array)
      for (int i = 0; i < jsonArrayrecipients.size(); i++) {
        TemplateRecipientsMapInner.validateJsonObject(jsonArrayrecipients.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("api_application_id") != null && !jsonObj.get("api_application_id").isJsonNull()) && !jsonObj.get("api_application_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_application_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_application_id").toString()));
      }
      if ((jsonObj.get("custom_requester_name") != null && !jsonObj.get("custom_requester_name").isJsonNull()) && !jsonObj.get("custom_requester_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_requester_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_requester_name").toString()));
      }
      if ((jsonObj.get("custom_requester_email") != null && !jsonObj.get("custom_requester_email").isJsonNull()) && !jsonObj.get("custom_requester_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_requester_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_requester_email").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if ((jsonObj.get("decline_redirect_url") != null && !jsonObj.get("decline_redirect_url").isJsonNull()) && !jsonObj.get("decline_redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decline_redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decline_redirect_url").toString()));
      }
      if (jsonObj.get("template_fields") != null && !jsonObj.get("template_fields").isJsonNull()) {
        JsonArray jsonArraytemplateFields = jsonObj.getAsJsonArray("template_fields");
        if (jsonArraytemplateFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("template_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `template_fields` to be an array in the JSON string but got `%s`", jsonObj.get("template_fields").toString()));
          }

          // validate the optional field `template_fields` (array)
          for (int i = 0; i < jsonArraytemplateFields.size(); i++) {
            TemplateFieldsMapInner.validateJsonObject(jsonArraytemplateFields.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            AdditionalFilesMapInner.validateJsonObject(jsonArrayfiles.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if (jsonObj.get("attachment_requests") != null && !jsonObj.get("attachment_requests").isJsonNull()) {
        JsonArray jsonArrayattachmentRequests = jsonObj.getAsJsonArray("attachment_requests");
        if (jsonArrayattachmentRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachment_requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachment_requests` to be an array in the JSON string but got `%s`", jsonObj.get("attachment_requests").toString()));
          }

          // validate the optional field `attachment_requests` (array)
          for (int i = 0; i < jsonArrayattachmentRequests.size(); i++) {
            AttachmentRequestsMapInner.validateJsonObject(jsonArrayattachmentRequests.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("copied_contacts") != null && !jsonObj.get("copied_contacts").isJsonNull()) {
        JsonArray jsonArraycopiedContacts = jsonObj.getAsJsonArray("copied_contacts");
        if (jsonArraycopiedContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("copied_contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `copied_contacts` to be an array in the JSON string but got `%s`", jsonObj.get("copied_contacts").toString()));
          }

          // validate the optional field `copied_contacts` (array)
          for (int i = 0; i < jsonArraycopiedContacts.size(); i++) {
            CopiedContactsMapInner.validateJsonObject(jsonArraycopiedContacts.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentFromTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentFromTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentFromTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentFromTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentFromTemplateRequest>() {
           @Override
           public void write(JsonWriter out, DocumentFromTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentFromTemplateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DocumentFromTemplateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentFromTemplateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentFromTemplateRequest
  * @throws IOException if the JSON string is invalid with respect to DocumentFromTemplateRequest
  */
  public static DocumentFromTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentFromTemplateRequest.class);
  }

 /**
  * Convert an instance of DocumentFromTemplateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

