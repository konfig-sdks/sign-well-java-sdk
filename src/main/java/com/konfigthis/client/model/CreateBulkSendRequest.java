/*
 * Resources and endpoints
 * When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateBulkSendRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateBulkSendRequest {
  public static final String SERIALIZED_NAME_TEMPLATE_IDS = "template_ids";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_IDS)
  private List<UUID> templateIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_BULK_SEND_CSV = "bulk_send_csv";
  @SerializedName(SERIALIZED_NAME_BULK_SEND_CSV)
  private byte[] bulkSendCsv;

  public static final String SERIALIZED_NAME_SKIP_ROW_ERRORS = "skip_row_errors";
  @SerializedName(SERIALIZED_NAME_SKIP_ROW_ERRORS)
  private Boolean skipRowErrors = false;

  public static final String SERIALIZED_NAME_API_APPLICATION_ID = "api_application_id";
  @SerializedName(SERIALIZED_NAME_API_APPLICATION_ID)
  private UUID apiApplicationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_APPLY_SIGNING_ORDER = "apply_signing_order";
  @SerializedName(SERIALIZED_NAME_APPLY_SIGNING_ORDER)
  private Boolean applySigningOrder = false;

  public static final String SERIALIZED_NAME_CUSTOM_REQUESTER_NAME = "custom_requester_name";
  @SerializedName(SERIALIZED_NAME_CUSTOM_REQUESTER_NAME)
  private String customRequesterName;

  public static final String SERIALIZED_NAME_CUSTOM_REQUESTER_EMAIL = "custom_requester_email";
  @SerializedName(SERIALIZED_NAME_CUSTOM_REQUESTER_EMAIL)
  private String customRequesterEmail;

  public CreateBulkSendRequest() {
  }

  public CreateBulkSendRequest templateIds(List<UUID> templateIds) {
    
    
    
    
    this.templateIds = templateIds;
    return this;
  }

  public CreateBulkSendRequest addTemplateIdsItem(UUID templateIdsItem) {
    this.templateIds.add(templateIdsItem);
    return this;
  }

   /**
   * Unique identifiers for a list of templates.
   * @return templateIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifiers for a list of templates.")

  public List<UUID> getTemplateIds() {
    return templateIds;
  }


  public void setTemplateIds(List<UUID> templateIds) {
    
    
    
    this.templateIds = templateIds;
  }


  public CreateBulkSendRequest bulkSendCsv(byte[] bulkSendCsv) {
    
    
    
    
    this.bulkSendCsv = bulkSendCsv;
    return this;
  }

   /**
   * A RFC 4648 base64 string of the template CSV file to be validated.
   * @return bulkSendCsv
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A RFC 4648 base64 string of the template CSV file to be validated.")

  public byte[] getBulkSendCsv() {
    return bulkSendCsv;
  }


  public void setBulkSendCsv(byte[] bulkSendCsv) {
    
    
    
    this.bulkSendCsv = bulkSendCsv;
  }


  public CreateBulkSendRequest skipRowErrors(Boolean skipRowErrors) {
    
    
    
    
    this.skipRowErrors = skipRowErrors;
    return this;
  }

   /**
   * Whether to skip errors in the rows. Defaults to &#x60;false&#x60;.
   * @return skipRowErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to skip errors in the rows. Defaults to `false`.")

  public Boolean getSkipRowErrors() {
    return skipRowErrors;
  }


  public void setSkipRowErrors(Boolean skipRowErrors) {
    
    
    
    this.skipRowErrors = skipRowErrors;
  }


  public CreateBulkSendRequest apiApplicationId(UUID apiApplicationId) {
    
    
    
    
    this.apiApplicationId = apiApplicationId;
    return this;
  }

   /**
   * Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings
   * @return apiApplicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings")

  public UUID getApiApplicationId() {
    return apiApplicationId;
  }


  public void setApiApplicationId(UUID apiApplicationId) {
    
    
    
    this.apiApplicationId = apiApplicationId;
  }


  public CreateBulkSendRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the Bulk Send. Will be used as the document name for each of the documents.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the Bulk Send. Will be used as the document name for each of the documents.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CreateBulkSendRequest subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public CreateBulkSendRequest message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * Email message for the signature request that recipients will see. Defaults to the default system message or a template message.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email message for the signature request that recipients will see. Defaults to the default system message or a template message.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public CreateBulkSendRequest applySigningOrder(Boolean applySigningOrder) {
    
    
    
    
    this.applySigningOrder = applySigningOrder;
    return this;
  }

   /**
   * When set to &#x60;true&#x60; recipients will sign one at a time in the order of the &#x60;recipients&#x60; collection of this request.
   * @return applySigningOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "When set to `true` recipients will sign one at a time in the order of the `recipients` collection of this request.")

  public Boolean getApplySigningOrder() {
    return applySigningOrder;
  }


  public void setApplySigningOrder(Boolean applySigningOrder) {
    
    
    
    this.applySigningOrder = applySigningOrder;
  }


  public CreateBulkSendRequest customRequesterName(String customRequesterName) {
    
    
    
    
    this.customRequesterName = customRequesterName;
    return this;
  }

   /**
   * Sets the custom requester name for the document. When set, this is the name used for all email communications, signing notifications, and in the audit file.
   * @return customRequesterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sets the custom requester name for the document. When set, this is the name used for all email communications, signing notifications, and in the audit file.")

  public String getCustomRequesterName() {
    return customRequesterName;
  }


  public void setCustomRequesterName(String customRequesterName) {
    
    
    
    this.customRequesterName = customRequesterName;
  }


  public CreateBulkSendRequest customRequesterEmail(String customRequesterEmail) {
    
    
    
    
    this.customRequesterEmail = customRequesterEmail;
    return this;
  }

   /**
   * Sets the custom requester email for the document. When set, this is the email used for all email communications, signing notifications, and in the audit file.
   * @return customRequesterEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sets the custom requester email for the document. When set, this is the email used for all email communications, signing notifications, and in the audit file.")

  public String getCustomRequesterEmail() {
    return customRequesterEmail;
  }


  public void setCustomRequesterEmail(String customRequesterEmail) {
    
    
    
    this.customRequesterEmail = customRequesterEmail;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateBulkSendRequest instance itself
   */
  public CreateBulkSendRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBulkSendRequest createBulkSendRequest = (CreateBulkSendRequest) o;
    return Objects.equals(this.templateIds, createBulkSendRequest.templateIds) &&
        Arrays.equals(this.bulkSendCsv, createBulkSendRequest.bulkSendCsv) &&
        Objects.equals(this.skipRowErrors, createBulkSendRequest.skipRowErrors) &&
        Objects.equals(this.apiApplicationId, createBulkSendRequest.apiApplicationId) &&
        Objects.equals(this.name, createBulkSendRequest.name) &&
        Objects.equals(this.subject, createBulkSendRequest.subject) &&
        Objects.equals(this.message, createBulkSendRequest.message) &&
        Objects.equals(this.applySigningOrder, createBulkSendRequest.applySigningOrder) &&
        Objects.equals(this.customRequesterName, createBulkSendRequest.customRequesterName) &&
        Objects.equals(this.customRequesterEmail, createBulkSendRequest.customRequesterEmail)&&
        Objects.equals(this.additionalProperties, createBulkSendRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateIds, Arrays.hashCode(bulkSendCsv), skipRowErrors, apiApplicationId, name, subject, message, applySigningOrder, customRequesterName, customRequesterEmail, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBulkSendRequest {\n");
    sb.append("    templateIds: ").append(toIndentedString(templateIds)).append("\n");
    sb.append("    bulkSendCsv: ").append(toIndentedString(bulkSendCsv)).append("\n");
    sb.append("    skipRowErrors: ").append(toIndentedString(skipRowErrors)).append("\n");
    sb.append("    apiApplicationId: ").append(toIndentedString(apiApplicationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    applySigningOrder: ").append(toIndentedString(applySigningOrder)).append("\n");
    sb.append("    customRequesterName: ").append(toIndentedString(customRequesterName)).append("\n");
    sb.append("    customRequesterEmail: ").append(toIndentedString(customRequesterEmail)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("template_ids");
    openapiFields.add("bulk_send_csv");
    openapiFields.add("skip_row_errors");
    openapiFields.add("api_application_id");
    openapiFields.add("name");
    openapiFields.add("subject");
    openapiFields.add("message");
    openapiFields.add("apply_signing_order");
    openapiFields.add("custom_requester_name");
    openapiFields.add("custom_requester_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("template_ids");
    openapiRequiredFields.add("bulk_send_csv");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateBulkSendRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateBulkSendRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBulkSendRequest is not found in the empty JSON string", CreateBulkSendRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBulkSendRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("template_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("template_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_ids` to be an array in the JSON string but got `%s`", jsonObj.get("template_ids").toString()));
      }
      if ((jsonObj.get("api_application_id") != null && !jsonObj.get("api_application_id").isJsonNull()) && !jsonObj.get("api_application_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_application_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_application_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("custom_requester_name") != null && !jsonObj.get("custom_requester_name").isJsonNull()) && !jsonObj.get("custom_requester_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_requester_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_requester_name").toString()));
      }
      if ((jsonObj.get("custom_requester_email") != null && !jsonObj.get("custom_requester_email").isJsonNull()) && !jsonObj.get("custom_requester_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_requester_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_requester_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBulkSendRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBulkSendRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBulkSendRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBulkSendRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBulkSendRequest>() {
           @Override
           public void write(JsonWriter out, CreateBulkSendRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBulkSendRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateBulkSendRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateBulkSendRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateBulkSendRequest
  * @throws IOException if the JSON string is invalid with respect to CreateBulkSendRequest
  */
  public static CreateBulkSendRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBulkSendRequest.class);
  }

 /**
  * Convert an instance of CreateBulkSendRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

