/*
 * Resources and endpoints
 * When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AdditionalFieldsMapInnerInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AdditionalFieldsMapInnerInner {
  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private Float x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private Float y;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_RECIPIENT_ID = "recipient_id";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ID)
  private String recipientId;

  /**
   * Field type of the field. Valid field types: initials, signatures, checkbox, date, and text. To autofill fields with contact data, use an autofill field type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    INITIALS("initials"),
    
    SIGNATURE("signature"),
    
    CHECKBOX("checkbox"),
    
    DATE("date"),
    
    TEXT("text"),
    
    AUTOFILL_COMPANY("autofill_company"),
    
    AUTOFILL_EMAIL("autofill_email"),
    
    AUTOFILL_FIRST_NAME("autofill_first_name"),
    
    AUTOFILL_LAST_NAME("autofill_last_name"),
    
    AUTOFILL_NAME("autofill_name"),
    
    AUTOFILL_PHONE("autofill_phone"),
    
    AUTOFILL_TITLE("autofill_title"),
    
    AUTOFILL_DATE_SIGNED("autofill_date_signed");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required = true;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value = null;

  public static final String SERIALIZED_NAME_API_ID = "api_id";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  /**
   * Text fields only: optional validation for field values. Valid values: numbers, letters, email_address, us_phone_number, us_zip_code, us_ssn, us_age, alphanumeric, us_bank_routing_number, us_bank_account.
   */
  @JsonAdapter(ValidationEnum.Adapter.class)
 public enum ValidationEnum {
    NO_TEXT_VALIDATION("no_text_validation"),
    
    NUMBERS("numbers"),
    
    LETTERS("letters"),
    
    EMAIL_ADDRESS("email_address"),
    
    US_PHONE_NUMBER("us_phone_number"),
    
    US_ZIP_CODE("us_zip_code"),
    
    US_SSN("us_ssn"),
    
    US_AGE("us_age"),
    
    ALPHANUMERIC("alphanumeric"),
    
    US_BANK_ROUTING_NUMBER("us_bank_routing_number"),
    
    US_BANK_ACCOUNT_NUMBER("us_bank_account_number");

    private String value;

    ValidationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationEnum fromValue(String value) {
      for (ValidationEnum b : ValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALIDATION = "validation";
  @SerializedName(SERIALIZED_NAME_VALIDATION)
  private ValidationEnum validation;

  public static final String SERIALIZED_NAME_FIXED_WIDTH = "fixed_width";
  @SerializedName(SERIALIZED_NAME_FIXED_WIDTH)
  private Boolean fixedWidth = false;

  public static final String SERIALIZED_NAME_LOCK_SIGN_DATE = "lock_sign_date";
  @SerializedName(SERIALIZED_NAME_LOCK_SIGN_DATE)
  private Boolean lockSignDate = false;

  /**
   * Date fields only: date format to use for the field. Valid values: MM/DD/YYYY, DD/MM/YYYY, YYYY/MM/DD, Month DD, YYYY, and MM/DD/YYYY hh:mm:ss a. Defaults to MM/DD/YYYY.
   */
  @JsonAdapter(DateFormatEnum.Adapter.class)
 public enum DateFormatEnum {
    MM_DD_YYYY("MM/DD/YYYY"),
    
    DD_MM_YYYY("DD/MM/YYYY"),
    
    YYYY_MM_DD("YYYY/MM/DD"),
    
    MONTH_DD_YYYY("Month DD, YYYY"),
    
    MM_DD_YYYY_HH_MM_SS_A("MM/DD/YYYY hh:mm:ss a");

    private String value;

    DateFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateFormatEnum fromValue(String value) {
      for (DateFormatEnum b : DateFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATE_FORMAT = "date_format";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private DateFormatEnum dateFormat;

  public AdditionalFieldsMapInnerInner() {
  }

  public AdditionalFieldsMapInnerInner x(Float x) {
    
    
    
    
    this.x = x;
    return this;
  }

   /**
   * Horizontal value in the coordinates of the field (in pixels). Coordinates are specific to the page where fields are located.
   * @return x
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Horizontal value in the coordinates of the field (in pixels). Coordinates are specific to the page where fields are located.")

  public Float getX() {
    return x;
  }


  public void setX(Float x) {
    
    
    
    this.x = x;
  }


  public AdditionalFieldsMapInnerInner y(Float y) {
    
    
    
    
    this.y = y;
    return this;
  }

   /**
   * Vertical value in the coordinates of the field (in pixels). Coordinates are specific to the page where fields are located.
   * @return y
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Vertical value in the coordinates of the field (in pixels). Coordinates are specific to the page where fields are located.")

  public Float getY() {
    return y;
  }


  public void setY(Float y) {
    
    
    
    this.y = y;
  }


  public AdditionalFieldsMapInnerInner page(Integer page) {
    
    
    
    
    this.page = page;
    return this;
  }

   /**
   * The page number within the file. If the page does not exist within the file then the field won&#39;t be created.
   * @return page
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The page number within the file. If the page does not exist within the file then the field won't be created.")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    
    
    
    this.page = page;
  }


  public AdditionalFieldsMapInnerInner recipientId(String recipientId) {
    
    
    
    
    this.recipientId = recipientId;
    return this;
  }

   /**
   * Unique identifier of the recipient assigned to the field. Recipients assigned to fields will be the only ones that will see and be able to complete those fields.
   * @return recipientId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique identifier of the recipient assigned to the field. Recipients assigned to fields will be the only ones that will see and be able to complete those fields.")

  public String getRecipientId() {
    return recipientId;
  }


  public void setRecipientId(String recipientId) {
    
    
    
    this.recipientId = recipientId;
  }


  public AdditionalFieldsMapInnerInner type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Field type of the field. Valid field types: initials, signatures, checkbox, date, and text. To autofill fields with contact data, use an autofill field type.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Field type of the field. Valid field types: initials, signatures, checkbox, date, and text. To autofill fields with contact data, use an autofill field type.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public AdditionalFieldsMapInnerInner required(Boolean required) {
    
    
    
    
    this.required = required;
    return this;
  }

   /**
   * Whether the field must be completed by the recipient. Defaults to &#x60;true&#x60; except for checkbox type fields.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the field must be completed by the recipient. Defaults to `true` except for checkbox type fields.")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    
    
    
    this.required = required;
  }


  public AdditionalFieldsMapInnerInner label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * Text and Date fields only: label that is displayed when the field is empty.
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text and Date fields only: label that is displayed when the field is empty.")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public AdditionalFieldsMapInnerInner value(Object value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Varies according to the field type. Text fields accept strings or numbers. Date fields accept Iso8601 date strings. CheckBoxes accept booleans. Signature and Initials fields can&#39;t be signed through API requests. Autofill text fields accept strings or numbers.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Varies according to the field type. Text fields accept strings or numbers. Date fields accept Iso8601 date strings. CheckBoxes accept booleans. Signature and Initials fields can't be signed through API requests. Autofill text fields accept strings or numbers.")

  public Object getValue() {
    return value;
  }


  public void setValue(Object value) {
    
    
    
    this.value = value;
  }


  public AdditionalFieldsMapInnerInner apiId(String apiId) {
    
    
    
    
    this.apiId = apiId;
    return this;
  }

   /**
   * Unique identifier of the field. Useful when needing to reference specific field values or update a document and its fields.
   * @return apiId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the field. Useful when needing to reference specific field values or update a document and its fields.")

  public String getApiId() {
    return apiId;
  }


  public void setApiId(String apiId) {
    
    
    
    this.apiId = apiId;
  }


  public AdditionalFieldsMapInnerInner validation(ValidationEnum validation) {
    
    
    
    
    this.validation = validation;
    return this;
  }

   /**
   * Text fields only: optional validation for field values. Valid values: numbers, letters, email_address, us_phone_number, us_zip_code, us_ssn, us_age, alphanumeric, us_bank_routing_number, us_bank_account.
   * @return validation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text fields only: optional validation for field values. Valid values: numbers, letters, email_address, us_phone_number, us_zip_code, us_ssn, us_age, alphanumeric, us_bank_routing_number, us_bank_account.")

  public ValidationEnum getValidation() {
    return validation;
  }


  public void setValidation(ValidationEnum validation) {
    
    
    
    this.validation = validation;
  }


  public AdditionalFieldsMapInnerInner fixedWidth(Boolean fixedWidth) {
    
    
    
    
    this.fixedWidth = fixedWidth;
    return this;
  }

   /**
   * Text fields only: whether the field width will stay fixed and text will display in multiple lines, rather than one long line. If set to &#x60;false&#x60; the field width will automatically grow horizontally to fit text on one line. Defaults to &#x60;false&#x60;.
   * @return fixedWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Text fields only: whether the field width will stay fixed and text will display in multiple lines, rather than one long line. If set to `false` the field width will automatically grow horizontally to fit text on one line. Defaults to `false`.")

  public Boolean getFixedWidth() {
    return fixedWidth;
  }


  public void setFixedWidth(Boolean fixedWidth) {
    
    
    
    this.fixedWidth = fixedWidth;
  }


  public AdditionalFieldsMapInnerInner lockSignDate(Boolean lockSignDate) {
    
    
    
    
    this.lockSignDate = lockSignDate;
    return this;
  }

   /**
   * Date fields only: makes fields readonly and automatically populates with the date the recipient signed. Defaults to &#x60;false&#x60;.
   * @return lockSignDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Date fields only: makes fields readonly and automatically populates with the date the recipient signed. Defaults to `false`.")

  public Boolean getLockSignDate() {
    return lockSignDate;
  }


  public void setLockSignDate(Boolean lockSignDate) {
    
    
    
    this.lockSignDate = lockSignDate;
  }


  public AdditionalFieldsMapInnerInner dateFormat(DateFormatEnum dateFormat) {
    
    
    
    
    this.dateFormat = dateFormat;
    return this;
  }

   /**
   * Date fields only: date format to use for the field. Valid values: MM/DD/YYYY, DD/MM/YYYY, YYYY/MM/DD, Month DD, YYYY, and MM/DD/YYYY hh:mm:ss a. Defaults to MM/DD/YYYY.
   * @return dateFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date fields only: date format to use for the field. Valid values: MM/DD/YYYY, DD/MM/YYYY, YYYY/MM/DD, Month DD, YYYY, and MM/DD/YYYY hh:mm:ss a. Defaults to MM/DD/YYYY.")

  public DateFormatEnum getDateFormat() {
    return dateFormat;
  }


  public void setDateFormat(DateFormatEnum dateFormat) {
    
    
    
    this.dateFormat = dateFormat;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AdditionalFieldsMapInnerInner instance itself
   */
  public AdditionalFieldsMapInnerInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalFieldsMapInnerInner additionalFieldsMapInnerInner = (AdditionalFieldsMapInnerInner) o;
    return Objects.equals(this.x, additionalFieldsMapInnerInner.x) &&
        Objects.equals(this.y, additionalFieldsMapInnerInner.y) &&
        Objects.equals(this.page, additionalFieldsMapInnerInner.page) &&
        Objects.equals(this.recipientId, additionalFieldsMapInnerInner.recipientId) &&
        Objects.equals(this.type, additionalFieldsMapInnerInner.type) &&
        Objects.equals(this.required, additionalFieldsMapInnerInner.required) &&
        Objects.equals(this.label, additionalFieldsMapInnerInner.label) &&
        Objects.equals(this.value, additionalFieldsMapInnerInner.value) &&
        Objects.equals(this.apiId, additionalFieldsMapInnerInner.apiId) &&
        Objects.equals(this.validation, additionalFieldsMapInnerInner.validation) &&
        Objects.equals(this.fixedWidth, additionalFieldsMapInnerInner.fixedWidth) &&
        Objects.equals(this.lockSignDate, additionalFieldsMapInnerInner.lockSignDate) &&
        Objects.equals(this.dateFormat, additionalFieldsMapInnerInner.dateFormat)&&
        Objects.equals(this.additionalProperties, additionalFieldsMapInnerInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(x, y, page, recipientId, type, required, label, value, apiId, validation, fixedWidth, lockSignDate, dateFormat, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalFieldsMapInnerInner {\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("    fixedWidth: ").append(toIndentedString(fixedWidth)).append("\n");
    sb.append("    lockSignDate: ").append(toIndentedString(lockSignDate)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("x");
    openapiFields.add("y");
    openapiFields.add("page");
    openapiFields.add("recipient_id");
    openapiFields.add("type");
    openapiFields.add("required");
    openapiFields.add("label");
    openapiFields.add("value");
    openapiFields.add("api_id");
    openapiFields.add("validation");
    openapiFields.add("fixed_width");
    openapiFields.add("lock_sign_date");
    openapiFields.add("date_format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("x");
    openapiRequiredFields.add("y");
    openapiRequiredFields.add("page");
    openapiRequiredFields.add("recipient_id");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AdditionalFieldsMapInnerInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AdditionalFieldsMapInnerInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalFieldsMapInnerInner is not found in the empty JSON string", AdditionalFieldsMapInnerInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalFieldsMapInnerInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("recipient_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("api_id") != null && !jsonObj.get("api_id").isJsonNull()) && !jsonObj.get("api_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_id").toString()));
      }
      if ((jsonObj.get("validation") != null && !jsonObj.get("validation").isJsonNull()) && !jsonObj.get("validation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation").toString()));
      }
      if ((jsonObj.get("date_format") != null && !jsonObj.get("date_format").isJsonNull()) && !jsonObj.get("date_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_format").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalFieldsMapInnerInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalFieldsMapInnerInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalFieldsMapInnerInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalFieldsMapInnerInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalFieldsMapInnerInner>() {
           @Override
           public void write(JsonWriter out, AdditionalFieldsMapInnerInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalFieldsMapInnerInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AdditionalFieldsMapInnerInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdditionalFieldsMapInnerInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdditionalFieldsMapInnerInner
  * @throws IOException if the JSON string is invalid with respect to AdditionalFieldsMapInnerInner
  */
  public static AdditionalFieldsMapInnerInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalFieldsMapInnerInner.class);
  }

 /**
  * Convert an instance of AdditionalFieldsMapInnerInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

