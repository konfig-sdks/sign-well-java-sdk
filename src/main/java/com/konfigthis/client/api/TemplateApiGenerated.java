/*
 * Resources and endpoints
 * When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support — whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AttachmentRequestsForTemplateMapInner;
import com.konfigthis.client.model.CopiedPlaceholdersMapInner;
import com.konfigthis.client.model.DocumentTemplateRequest;
import com.konfigthis.client.model.DocumentTemplateUpdateRequest;
import com.konfigthis.client.model.FilesMapInner;
import com.konfigthis.client.model.PlaceholdersMapInner;
import com.konfigthis.client.model.TemplateCreateNewResponse;
import com.konfigthis.client.model.TemplateGetTemplateDataResponse;
import com.konfigthis.client.model.TemplateUpdateExistingTemplateResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"X-Api-Key\" is required but no API key was provided. Please set \"X-Api-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCall(DocumentTemplateRequest documentTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(DocumentTemplateRequest documentTemplateRequest, final ApiCallback _callback) throws ApiException {
        return createNewCall(documentTemplateRequest, _callback);

    }


    private ApiResponse<TemplateCreateNewResponse> createNewWithHttpInfo(DocumentTemplateRequest documentTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(documentTemplateRequest, null);
        Type localVarReturnType = new TypeToken<TemplateCreateNewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(DocumentTemplateRequest documentTemplateRequest, final ApiCallback<TemplateCreateNewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(documentTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplateCreateNewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final List<FilesMapInner> files;
        private final List<PlaceholdersMapInner> placeholders;
        private String name;
        private String subject;
        private String message;
        private List<CopiedPlaceholdersMapInner> copiedPlaceholders;
        private Boolean draft;
        private Integer expiresIn;
        private Boolean reminders;
        private Boolean applySigningOrder;
        private UUID apiApplicationId;
        private Boolean textTags;
        private String redirectUrl;
        private Boolean allowDecline;
        private Boolean allowReassign;
        private String declineRedirectUrl;
        private Object metadata;
        private List<List<FieldsForTemplateMapInnerInner>> fields;
        private List<AttachmentRequestsForTemplateMapInner> attachmentRequests;

        private CreateNewRequestBuilder(List<FilesMapInner> files, List<PlaceholdersMapInner> placeholders) {
            this.files = files;
            this.placeholders = placeholders;
        }

        /**
         * Set name
         * @param name The name of the template. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject (if the document is created from a template). (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set message
         * @param message Email message for the signature request that recipients will see. Defaults to the default system message or a template message (if the document is created from a template). (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set copiedPlaceholders
         * @param copiedPlaceholders Copied placeholders are emailed the final document once it has been completed by all recipients. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder copiedPlaceholders(List<CopiedPlaceholdersMapInner> copiedPlaceholders) {
            this.copiedPlaceholders = copiedPlaceholders;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Whether the template can still be updated before it is ready for usage. If set to &#x60;false&#x60; the template is marked as &#x60;Available&#x60; and it will be ready for use. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set expiresIn
         * @param expiresIn Number of days before the signature request expires. Defaults to the account expiration setting or template expiration (if the document is created from a template). (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder expiresIn(Integer expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }
        
        /**
         * Set reminders
         * @param reminders Whether to send signing reminders to recipients. Reminders are sent on day 3, day 6, and day 10 if set to &#x60;true&#x60;. Defaults to &#x60;true&#x60;. (optional, default to true)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder reminders(Boolean reminders) {
            this.reminders = reminders;
            return this;
        }
        
        /**
         * Set applySigningOrder
         * @param applySigningOrder When set to &#x60;true&#x60; recipients will sign one at a time in the order of the &#x60;recipients&#x60; collection of this request. (optional, default to false)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder applySigningOrder(Boolean applySigningOrder) {
            this.applySigningOrder = applySigningOrder;
            return this;
        }
        
        /**
         * Set apiApplicationId
         * @param apiApplicationId Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder apiApplicationId(UUID apiApplicationId) {
            this.apiApplicationId = apiApplicationId;
            return this;
        }
        
        /**
         * Set textTags
         * @param textTags An alternative way (if you can’t use the recommended way) of placing fields in specific locations of your document by using special text tags. Useful when changing the content of your files changes the location of fields. See API documentation for “Text Tags” for details. Defaults to false. (optional, default to false)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder textTags(Boolean textTags) {
            this.textTags = textTags;
            return this;
        }
        
        /**
         * Set redirectUrl
         * @param redirectUrl A URL that recipients are redirected to after successfully signing a document. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder redirectUrl(String redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        /**
         * Set allowDecline
         * @param allowDecline Whether to allow recipients the option to decline signing a document. If multiple signers are involved in a document, any single recipient can cancel the entire document signing process by declining to sign. (optional, default to true)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder allowDecline(Boolean allowDecline) {
            this.allowDecline = allowDecline;
            return this;
        }
        
        /**
         * Set allowReassign
         * @param allowReassign In some cases a signer is not the right person to sign and may need to reassign their signing responsibilities to another person. This feature allows them to reassign the document to someone else. (optional, default to true)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder allowReassign(Boolean allowReassign) {
            this.allowReassign = allowReassign;
            return this;
        }
        
        /**
         * Set declineRedirectUrl
         * @param declineRedirectUrl A URL that recipients are redirected to if the document is declined. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder declineRedirectUrl(String declineRedirectUrl) {
            this.declineRedirectUrl = declineRedirectUrl;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Optional key-value data that can be associated with the document. If set, will be available every time the document data is returned. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Document fields placed on a document for collecting data or signatures from recipients. At least one field must be present in the Create Document request if &#x60;draft&#x60; is &#x60;false&#x60; (unless adding a signature page by using &#x60;with_signature_page&#x60;). Field data should be sent as a 2-dimensional JSON array. One array of fields is needed for each file in the files array. An array of fields can be empty if you have a file that does not contain any fields. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder fields(List<List<FieldsForTemplateMapInnerInner>> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set attachmentRequests
         * @param attachmentRequests Attachments that a recipient must upload to complete the signing process. Attachment requests are shown after all document fields have been completed. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder attachmentRequests(List<AttachmentRequestsForTemplateMapInner> attachmentRequests) {
            this.attachmentRequests = attachmentRequests;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentTemplateRequest documentTemplateRequest = buildBodyParams();
            return createNewCall(documentTemplateRequest, _callback);
        }

        private DocumentTemplateRequest buildBodyParams() {
            DocumentTemplateRequest documentTemplateRequest = new DocumentTemplateRequest();
            documentTemplateRequest.files(this.files);
            documentTemplateRequest.name(this.name);
            documentTemplateRequest.subject(this.subject);
            documentTemplateRequest.message(this.message);
            documentTemplateRequest.placeholders(this.placeholders);
            documentTemplateRequest.copiedPlaceholders(this.copiedPlaceholders);
            documentTemplateRequest.draft(this.draft);
            documentTemplateRequest.expiresIn(this.expiresIn);
            documentTemplateRequest.reminders(this.reminders);
            documentTemplateRequest.applySigningOrder(this.applySigningOrder);
            documentTemplateRequest.apiApplicationId(this.apiApplicationId);
            documentTemplateRequest.textTags(this.textTags);
            documentTemplateRequest.redirectUrl(this.redirectUrl);
            documentTemplateRequest.allowDecline(this.allowDecline);
            documentTemplateRequest.allowReassign(this.allowReassign);
            documentTemplateRequest.declineRedirectUrl(this.declineRedirectUrl);
            documentTemplateRequest.metadata(this.metadata);
            documentTemplateRequest.fields(this.fields);
            documentTemplateRequest.attachmentRequests(this.attachmentRequests);
            return documentTemplateRequest;
        }

        /**
         * Execute createNew request
         * @return TemplateCreateNewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
         </table>
         */
        public TemplateCreateNewResponse execute() throws ApiException {
            DocumentTemplateRequest documentTemplateRequest = buildBodyParams();
            ApiResponse<TemplateCreateNewResponse> localVarResp = createNewWithHttpInfo(documentTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;TemplateCreateNewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateCreateNewResponse> executeWithHttpInfo() throws ApiException {
            DocumentTemplateRequest documentTemplateRequest = buildBodyParams();
            return createNewWithHttpInfo(documentTemplateRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateCreateNewResponse> _callback) throws ApiException {
            DocumentTemplateRequest documentTemplateRequest = buildBodyParams();
            return createNewAsync(documentTemplateRequest, _callback);
        }
    }

    /**
     * Create Template
     * Creates a new template.
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(List<FilesMapInner> files, List<PlaceholdersMapInner> placeholders) throws IllegalArgumentException {
        if (files == null) throw new IllegalArgumentException("\"files\" is required but got null");
        if (placeholders == null) throw new IllegalArgumentException("\"placeholders\" is required but got null");
        return new CreateNewRequestBuilder(files, placeholders);
    }
    private okhttp3.Call deleteDocumentTemplateCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document_templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentTemplateValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDocumentTemplate(Async)");
        }

        return deleteDocumentTemplateCall(id, _callback);

    }


    private ApiResponse<Void> deleteDocumentTemplateWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentTemplateValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDocumentTemplateAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentTemplateValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDocumentTemplateRequestBuilder {
        private final UUID id;

        private DeleteDocumentTemplateRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteDocumentTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDocumentTemplateCall(id, _callback);
        }


        /**
         * Execute deleteDocumentTemplate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDocumentTemplateWithHttpInfo(id);
        }

        /**
         * Execute deleteDocumentTemplate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDocumentTemplateWithHttpInfo(id);
        }

        /**
         * Execute deleteDocumentTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDocumentTemplateAsync(id, _callback);
        }
    }

    /**
     * Delete Template
     * Deletes a template. Supply the unique template ID from either a Create Template request or template page URL.
     * @param id  (required)
     * @return DeleteDocumentTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDocumentTemplateRequestBuilder deleteDocumentTemplate(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteDocumentTemplateRequestBuilder(id);
    }
    private okhttp3.Call getTemplateDataCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document_templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateDataValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTemplateData(Async)");
        }

        return getTemplateDataCall(id, _callback);

    }


    private ApiResponse<TemplateGetTemplateDataResponse> getTemplateDataWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getTemplateDataValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TemplateGetTemplateDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTemplateDataAsync(UUID id, final ApiCallback<TemplateGetTemplateDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateDataValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TemplateGetTemplateDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTemplateDataRequestBuilder {
        private final UUID id;

        private GetTemplateDataRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getTemplateData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTemplateDataCall(id, _callback);
        }


        /**
         * Execute getTemplateData request
         * @return TemplateGetTemplateDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public TemplateGetTemplateDataResponse execute() throws ApiException {
            ApiResponse<TemplateGetTemplateDataResponse> localVarResp = getTemplateDataWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTemplateData request with HTTP info returned
         * @return ApiResponse&lt;TemplateGetTemplateDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateGetTemplateDataResponse> executeWithHttpInfo() throws ApiException {
            return getTemplateDataWithHttpInfo(id);
        }

        /**
         * Execute getTemplateData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateGetTemplateDataResponse> _callback) throws ApiException {
            return getTemplateDataAsync(id, _callback);
        }
    }

    /**
     * Get Template
     * Returns a template and all associated template data. Supply the unique template ID from either a Create Template request or template page URL.
     * @param id  (required)
     * @return GetTemplateDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateDataRequestBuilder getTemplateData(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTemplateDataRequestBuilder(id);
    }
    private okhttp3.Call updateExistingTemplateCall(UUID id, DocumentTemplateUpdateRequest documentTemplateUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentTemplateUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document_templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingTemplateValidateBeforeCall(UUID id, DocumentTemplateUpdateRequest documentTemplateUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateExistingTemplate(Async)");
        }

        return updateExistingTemplateCall(id, documentTemplateUpdateRequest, _callback);

    }


    private ApiResponse<TemplateUpdateExistingTemplateResponse> updateExistingTemplateWithHttpInfo(UUID id, DocumentTemplateUpdateRequest documentTemplateUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateExistingTemplateValidateBeforeCall(id, documentTemplateUpdateRequest, null);
        Type localVarReturnType = new TypeToken<TemplateUpdateExistingTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingTemplateAsync(UUID id, DocumentTemplateUpdateRequest documentTemplateUpdateRequest, final ApiCallback<TemplateUpdateExistingTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingTemplateValidateBeforeCall(id, documentTemplateUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplateUpdateExistingTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingTemplateRequestBuilder {
        private final UUID id;
        private String name;
        private String subject;
        private String message;
        private Boolean draft;
        private Integer expiresIn;
        private Boolean reminders;
        private Boolean applySigningOrder;
        private UUID apiApplicationId;
        private String redirectUrl;
        private Boolean allowDecline;
        private Boolean allowReassign;
        private String declineRedirectUrl;
        private Object metadata;

        private UpdateExistingTemplateRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name The name of the template. (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject (if the document is created from a template). (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set message
         * @param message Email message for the signature request that recipients will see. Defaults to the default system message or a template message (if the document is created from a template). (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Whether the template can still be updated before it is ready for usage. If set to &#x60;false&#x60; the template is marked as &#x60;Available&#x60; and it will be ready for use. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set expiresIn
         * @param expiresIn Number of days before the signature request expires. Defaults to the account expiration setting or template expiration (if the document is created from a template). (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder expiresIn(Integer expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }
        
        /**
         * Set reminders
         * @param reminders Whether to send signing reminders to recipients. Reminders are sent on day 3, day 6, and day 10 if set to &#x60;true&#x60;. Defaults to &#x60;true&#x60;. (optional, default to true)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder reminders(Boolean reminders) {
            this.reminders = reminders;
            return this;
        }
        
        /**
         * Set applySigningOrder
         * @param applySigningOrder When set to &#x60;true&#x60; recipients will sign one at a time in the order of the &#x60;recipients&#x60; collection of this request. (optional, default to false)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder applySigningOrder(Boolean applySigningOrder) {
            this.applySigningOrder = applySigningOrder;
            return this;
        }
        
        /**
         * Set apiApplicationId
         * @param apiApplicationId Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder apiApplicationId(UUID apiApplicationId) {
            this.apiApplicationId = apiApplicationId;
            return this;
        }
        
        /**
         * Set redirectUrl
         * @param redirectUrl A URL that recipients are redirected to after successfully signing a document. (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder redirectUrl(String redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        /**
         * Set allowDecline
         * @param allowDecline Whether to allow recipients the option to decline signing a document. If multiple signers are involved in a document, any single recipient can cancel the entire document signing process by declining to sign. (optional, default to true)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder allowDecline(Boolean allowDecline) {
            this.allowDecline = allowDecline;
            return this;
        }
        
        /**
         * Set allowReassign
         * @param allowReassign In some cases a signer is not the right person to sign and may need to reassign their signing responsibilities to another person. This feature allows them to reassign the document to someone else. (optional, default to true)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder allowReassign(Boolean allowReassign) {
            this.allowReassign = allowReassign;
            return this;
        }
        
        /**
         * Set declineRedirectUrl
         * @param declineRedirectUrl A URL that recipients are redirected to if the document is declined. (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder declineRedirectUrl(String declineRedirectUrl) {
            this.declineRedirectUrl = declineRedirectUrl;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Optional key-value data that can be associated with the document. If set, will be available every time the document data is returned. (optional)
         * @return UpdateExistingTemplateRequestBuilder
         */
        public UpdateExistingTemplateRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for updateExistingTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentTemplateUpdateRequest documentTemplateUpdateRequest = buildBodyParams();
            return updateExistingTemplateCall(id, documentTemplateUpdateRequest, _callback);
        }

        private DocumentTemplateUpdateRequest buildBodyParams() {
            DocumentTemplateUpdateRequest documentTemplateUpdateRequest = new DocumentTemplateUpdateRequest();
            documentTemplateUpdateRequest.name(this.name);
            documentTemplateUpdateRequest.subject(this.subject);
            documentTemplateUpdateRequest.message(this.message);
            documentTemplateUpdateRequest.draft(this.draft);
            documentTemplateUpdateRequest.expiresIn(this.expiresIn);
            documentTemplateUpdateRequest.reminders(this.reminders);
            documentTemplateUpdateRequest.applySigningOrder(this.applySigningOrder);
            documentTemplateUpdateRequest.apiApplicationId(this.apiApplicationId);
            documentTemplateUpdateRequest.redirectUrl(this.redirectUrl);
            documentTemplateUpdateRequest.allowDecline(this.allowDecline);
            documentTemplateUpdateRequest.allowReassign(this.allowReassign);
            documentTemplateUpdateRequest.declineRedirectUrl(this.declineRedirectUrl);
            documentTemplateUpdateRequest.metadata(this.metadata);
            return documentTemplateUpdateRequest;
        }

        /**
         * Execute updateExistingTemplate request
         * @return TemplateUpdateExistingTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
         </table>
         */
        public TemplateUpdateExistingTemplateResponse execute() throws ApiException {
            DocumentTemplateUpdateRequest documentTemplateUpdateRequest = buildBodyParams();
            ApiResponse<TemplateUpdateExistingTemplateResponse> localVarResp = updateExistingTemplateWithHttpInfo(id, documentTemplateUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingTemplate request with HTTP info returned
         * @return ApiResponse&lt;TemplateUpdateExistingTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateUpdateExistingTemplateResponse> executeWithHttpInfo() throws ApiException {
            DocumentTemplateUpdateRequest documentTemplateUpdateRequest = buildBodyParams();
            return updateExistingTemplateWithHttpInfo(id, documentTemplateUpdateRequest);
        }

        /**
         * Execute updateExistingTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateUpdateExistingTemplateResponse> _callback) throws ApiException {
            DocumentTemplateUpdateRequest documentTemplateUpdateRequest = buildBodyParams();
            return updateExistingTemplateAsync(id, documentTemplateUpdateRequest, _callback);
        }
    }

    /**
     * Update Template
     * Updates an existing template.
     * @param id  (required)
     * @return UpdateExistingTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingTemplateRequestBuilder updateExistingTemplate(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateExistingTemplateRequestBuilder(id);
    }
}
