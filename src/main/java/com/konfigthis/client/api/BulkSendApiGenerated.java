/*
 * Resources and endpoints
 * When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkSendCreateValidationCsvResponse;
import com.konfigthis.client.model.BulkSendCsvRequest;
import com.konfigthis.client.model.BulkSendGetCsvTemplate200Response;
import com.konfigthis.client.model.BulkSendGetDocumentsResponse;
import com.konfigthis.client.model.BulkSendGetInformationResponse;
import com.konfigthis.client.model.BulkSendListBulkSendingsResponse;
import com.konfigthis.client.model.BulkSendValidateCsvResponse;
import com.konfigthis.client.model.CreateBulkSendRequest;
import java.io.File;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BulkSendApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkSendApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BulkSendApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"X-Api-Key\" is required but no API key was provided. Please set \"X-Api-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createValidationCsvCall(CreateBulkSendRequest createBulkSendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBulkSendRequest;

        // create path and map variables
        String localVarPath = "/api/v1/bulk_sends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidationCsvValidateBeforeCall(CreateBulkSendRequest createBulkSendRequest, final ApiCallback _callback) throws ApiException {
        return createValidationCsvCall(createBulkSendRequest, _callback);

    }


    private ApiResponse<BulkSendCreateValidationCsvResponse> createValidationCsvWithHttpInfo(CreateBulkSendRequest createBulkSendRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidationCsvValidateBeforeCall(createBulkSendRequest, null);
        Type localVarReturnType = new TypeToken<BulkSendCreateValidationCsvResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createValidationCsvAsync(CreateBulkSendRequest createBulkSendRequest, final ApiCallback<BulkSendCreateValidationCsvResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidationCsvValidateBeforeCall(createBulkSendRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkSendCreateValidationCsvResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateValidationCsvRequestBuilder {
        private final List<UUID> templateIds;
        private final byte[] bulkSendCsv;
        private Boolean skipRowErrors;
        private UUID apiApplicationId;
        private String name;
        private String subject;
        private String message;
        private Boolean applySigningOrder;
        private String customRequesterName;
        private String customRequesterEmail;

        private CreateValidationCsvRequestBuilder(List<UUID> templateIds, byte[] bulkSendCsv) {
            this.templateIds = templateIds;
            this.bulkSendCsv = bulkSendCsv;
        }

        /**
         * Set skipRowErrors
         * @param skipRowErrors Whether to skip errors in the rows. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder skipRowErrors(Boolean skipRowErrors) {
            this.skipRowErrors = skipRowErrors;
            return this;
        }
        
        /**
         * Set apiApplicationId
         * @param apiApplicationId Unique identifier for API Application settings to use. API Applications are optional and mainly used when isolating OAuth apps or for more control over embedded API settings (optional)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder apiApplicationId(UUID apiApplicationId) {
            this.apiApplicationId = apiApplicationId;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the Bulk Send. Will be used as the document name for each of the documents. (optional)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Email subject for the signature request that recipients will see. Defaults to the default system subject or a template subject. (optional)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set message
         * @param message Email message for the signature request that recipients will see. Defaults to the default system message or a template message. (optional)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set applySigningOrder
         * @param applySigningOrder When set to &#x60;true&#x60; recipients will sign one at a time in the order of the &#x60;recipients&#x60; collection of this request. (optional, default to false)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder applySigningOrder(Boolean applySigningOrder) {
            this.applySigningOrder = applySigningOrder;
            return this;
        }
        
        /**
         * Set customRequesterName
         * @param customRequesterName Sets the custom requester name for the document. When set, this is the name used for all email communications, signing notifications, and in the audit file. (optional)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder customRequesterName(String customRequesterName) {
            this.customRequesterName = customRequesterName;
            return this;
        }
        
        /**
         * Set customRequesterEmail
         * @param customRequesterEmail Sets the custom requester email for the document. When set, this is the email used for all email communications, signing notifications, and in the audit file. (optional)
         * @return CreateValidationCsvRequestBuilder
         */
        public CreateValidationCsvRequestBuilder customRequesterEmail(String customRequesterEmail) {
            this.customRequesterEmail = customRequesterEmail;
            return this;
        }
        
        /**
         * Build call for createValidationCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateBulkSendRequest createBulkSendRequest = buildBodyParams();
            return createValidationCsvCall(createBulkSendRequest, _callback);
        }

        private CreateBulkSendRequest buildBodyParams() {
            CreateBulkSendRequest createBulkSendRequest = new CreateBulkSendRequest();
            createBulkSendRequest.templateIds(this.templateIds);
            createBulkSendRequest.bulkSendCsv(this.bulkSendCsv);
            createBulkSendRequest.skipRowErrors(this.skipRowErrors);
            createBulkSendRequest.apiApplicationId(this.apiApplicationId);
            createBulkSendRequest.name(this.name);
            createBulkSendRequest.subject(this.subject);
            createBulkSendRequest.message(this.message);
            createBulkSendRequest.applySigningOrder(this.applySigningOrder);
            createBulkSendRequest.customRequesterName(this.customRequesterName);
            createBulkSendRequest.customRequesterEmail(this.customRequesterEmail);
            return createBulkSendRequest;
        }

        /**
         * Execute createValidationCsv request
         * @return BulkSendCreateValidationCsvResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public BulkSendCreateValidationCsvResponse execute() throws ApiException {
            CreateBulkSendRequest createBulkSendRequest = buildBodyParams();
            ApiResponse<BulkSendCreateValidationCsvResponse> localVarResp = createValidationCsvWithHttpInfo(createBulkSendRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createValidationCsv request with HTTP info returned
         * @return ApiResponse&lt;BulkSendCreateValidationCsvResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkSendCreateValidationCsvResponse> executeWithHttpInfo() throws ApiException {
            CreateBulkSendRequest createBulkSendRequest = buildBodyParams();
            return createValidationCsvWithHttpInfo(createBulkSendRequest);
        }

        /**
         * Execute createValidationCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkSendCreateValidationCsvResponse> _callback) throws ApiException {
            CreateBulkSendRequest createBulkSendRequest = buildBodyParams();
            return createValidationCsvAsync(createBulkSendRequest, _callback);
        }
    }

    /**
     * Create Bulk Send
     * Creates a bulk send, and it validates the CSV file before creating the bulk send.
     * @return CreateValidationCsvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public CreateValidationCsvRequestBuilder createValidationCsv(List<UUID> templateIds, byte[] bulkSendCsv) throws IllegalArgumentException {
        if (templateIds == null) throw new IllegalArgumentException("\"templateIds\" is required but got null");
        if (bulkSendCsv == null) throw new IllegalArgumentException("\"bulkSendCsv\" is required but got null");
        return new CreateValidationCsvRequestBuilder(templateIds, bulkSendCsv);
    }
    private okhttp3.Call getCsvTemplateCall(List<UUID> templateIds, byte[] base64, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/bulk_sends/csv_template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "template_ids[]", templateIds));
        }

        if (base64 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base64", base64));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCsvTemplateValidateBeforeCall(List<UUID> templateIds, byte[] base64, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateIds' is set
        if (templateIds == null) {
            throw new ApiException("Missing the required parameter 'templateIds' when calling getCsvTemplate(Async)");
        }

        return getCsvTemplateCall(templateIds, base64, _callback);

    }


    private ApiResponse<BulkSendGetCsvTemplate200Response> getCsvTemplateWithHttpInfo(List<UUID> templateIds, byte[] base64) throws ApiException {
        okhttp3.Call localVarCall = getCsvTemplateValidateBeforeCall(templateIds, base64, null);
        Type localVarReturnType = new TypeToken<BulkSendGetCsvTemplate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCsvTemplateAsync(List<UUID> templateIds, byte[] base64, final ApiCallback<BulkSendGetCsvTemplate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCsvTemplateValidateBeforeCall(templateIds, base64, _callback);
        Type localVarReturnType = new TypeToken<BulkSendGetCsvTemplate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCsvTemplateRequestBuilder {
        private final List<UUID> templateIds;
        private byte[] base64;

        private GetCsvTemplateRequestBuilder(List<UUID> templateIds) {
            this.templateIds = templateIds;
        }

        /**
         * Set base64
         * @param base64  (optional)
         * @return GetCsvTemplateRequestBuilder
         */
        public GetCsvTemplateRequestBuilder base64(byte[] base64) {
            this.base64 = base64;
            return this;
        }
        
        /**
         * Build call for getCsvTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCsvTemplateCall(templateIds, base64, _callback);
        }


        /**
         * Execute getCsvTemplate request
         * @return BulkSendGetCsvTemplate200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public BulkSendGetCsvTemplate200Response execute() throws ApiException {
            ApiResponse<BulkSendGetCsvTemplate200Response> localVarResp = getCsvTemplateWithHttpInfo(templateIds, base64);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCsvTemplate request with HTTP info returned
         * @return ApiResponse&lt;BulkSendGetCsvTemplate200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkSendGetCsvTemplate200Response> executeWithHttpInfo() throws ApiException {
            return getCsvTemplateWithHttpInfo(templateIds, base64);
        }

        /**
         * Execute getCsvTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkSendGetCsvTemplate200Response> _callback) throws ApiException {
            return getCsvTemplateAsync(templateIds, base64, _callback);
        }
    }

    /**
     * Get Bulk Send CSV Template
     * Fetches a CSV template that corresponds to the provided document template IDs. CSV templates are blank CSV files that have columns containing required and optional data that can be sent when creating a bulk send. Fields can be referenced by the field label. Example: [placeholder name]_[field label] could be something like customer_address or signer_company_name (if \&quot;Customer\&quot; and \&quot;Signer\&quot; were placeholder names for templates set up in SignWell).
     * @param templateIds  (required)
     * @return GetCsvTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public GetCsvTemplateRequestBuilder getCsvTemplate(List<UUID> templateIds) throws IllegalArgumentException {
        if (templateIds == null) throw new IllegalArgumentException("\"templateIds\" is required but got null");
        return new GetCsvTemplateRequestBuilder(templateIds);
    }
    private okhttp3.Call getDocumentsCall(UUID id, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/bulk_sends/{id}/documents"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsValidateBeforeCall(UUID id, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDocuments(Async)");
        }

        return getDocumentsCall(id, limit, page, _callback);

    }


    private ApiResponse<BulkSendGetDocumentsResponse> getDocumentsWithHttpInfo(UUID id, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(id, limit, page, null);
        Type localVarReturnType = new TypeToken<BulkSendGetDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDocumentsAsync(UUID id, Integer limit, Integer page, final ApiCallback<BulkSendGetDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(id, limit, page, _callback);
        Type localVarReturnType = new TypeToken<BulkSendGetDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDocumentsRequestBuilder {
        private final UUID id;
        private Integer limit;
        private Integer page;

        private GetDocumentsRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 10)
         * @return GetDocumentsRequestBuilder
         */
        public GetDocumentsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GetDocumentsRequestBuilder
         */
        public GetDocumentsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocumentsCall(id, limit, page, _callback);
        }


        /**
         * Execute getDocuments request
         * @return BulkSendGetDocumentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public BulkSendGetDocumentsResponse execute() throws ApiException {
            ApiResponse<BulkSendGetDocumentsResponse> localVarResp = getDocumentsWithHttpInfo(id, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDocuments request with HTTP info returned
         * @return ApiResponse&lt;BulkSendGetDocumentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkSendGetDocumentsResponse> executeWithHttpInfo() throws ApiException {
            return getDocumentsWithHttpInfo(id, limit, page);
        }

        /**
         * Execute getDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkSendGetDocumentsResponse> _callback) throws ApiException {
            return getDocumentsAsync(id, limit, page, _callback);
        }
    }

    /**
     * Get Bulk Send Documents
     * Returns information about the Bulk Send.
     * @param id  (required)
     * @return GetDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentsRequestBuilder getDocuments(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDocumentsRequestBuilder(id);
    }
    private okhttp3.Call getInformationCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/bulk_sends/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInformation(Async)");
        }

        return getInformationCall(id, _callback);

    }


    private ApiResponse<BulkSendGetInformationResponse> getInformationWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BulkSendGetInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(UUID id, final ApiCallback<BulkSendGetInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BulkSendGetInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final UUID id;

        private GetInformationRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(id, _callback);
        }


        /**
         * Execute getInformation request
         * @return BulkSendGetInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public BulkSendGetInformationResponse execute() throws ApiException {
            ApiResponse<BulkSendGetInformationResponse> localVarResp = getInformationWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;BulkSendGetInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkSendGetInformationResponse> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(id);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkSendGetInformationResponse> _callback) throws ApiException {
            return getInformationAsync(id, _callback);
        }
    }

    /**
     * Get Bulk Send
     * Returns information about the Bulk Send.
     * @param id  (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetInformationRequestBuilder(id);
    }
    private okhttp3.Call listBulkSendingsCall(String userEmail, Integer limit, Integer page, UUID apiApplicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/bulk_sends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_email", userEmail));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (apiApplicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_application_id", apiApplicationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBulkSendingsValidateBeforeCall(String userEmail, Integer limit, Integer page, UUID apiApplicationId, final ApiCallback _callback) throws ApiException {
        return listBulkSendingsCall(userEmail, limit, page, apiApplicationId, _callback);

    }


    private ApiResponse<BulkSendListBulkSendingsResponse> listBulkSendingsWithHttpInfo(String userEmail, Integer limit, Integer page, UUID apiApplicationId) throws ApiException {
        okhttp3.Call localVarCall = listBulkSendingsValidateBeforeCall(userEmail, limit, page, apiApplicationId, null);
        Type localVarReturnType = new TypeToken<BulkSendListBulkSendingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBulkSendingsAsync(String userEmail, Integer limit, Integer page, UUID apiApplicationId, final ApiCallback<BulkSendListBulkSendingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBulkSendingsValidateBeforeCall(userEmail, limit, page, apiApplicationId, _callback);
        Type localVarReturnType = new TypeToken<BulkSendListBulkSendingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBulkSendingsRequestBuilder {
        private String userEmail;
        private Integer limit;
        private Integer page;
        private UUID apiApplicationId;

        private ListBulkSendingsRequestBuilder() {
        }

        /**
         * Set userEmail
         * @param userEmail  (optional)
         * @return ListBulkSendingsRequestBuilder
         */
        public ListBulkSendingsRequestBuilder userEmail(String userEmail) {
            this.userEmail = userEmail;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional, default to 10)
         * @return ListBulkSendingsRequestBuilder
         */
        public ListBulkSendingsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return ListBulkSendingsRequestBuilder
         */
        public ListBulkSendingsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set apiApplicationId
         * @param apiApplicationId  (optional)
         * @return ListBulkSendingsRequestBuilder
         */
        public ListBulkSendingsRequestBuilder apiApplicationId(UUID apiApplicationId) {
            this.apiApplicationId = apiApplicationId;
            return this;
        }
        
        /**
         * Build call for listBulkSendings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBulkSendingsCall(userEmail, limit, page, apiApplicationId, _callback);
        }


        /**
         * Execute listBulkSendings request
         * @return BulkSendListBulkSendingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public BulkSendListBulkSendingsResponse execute() throws ApiException {
            ApiResponse<BulkSendListBulkSendingsResponse> localVarResp = listBulkSendingsWithHttpInfo(userEmail, limit, page, apiApplicationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBulkSendings request with HTTP info returned
         * @return ApiResponse&lt;BulkSendListBulkSendingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkSendListBulkSendingsResponse> executeWithHttpInfo() throws ApiException {
            return listBulkSendingsWithHttpInfo(userEmail, limit, page, apiApplicationId);
        }

        /**
         * Execute listBulkSendings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkSendListBulkSendingsResponse> _callback) throws ApiException {
            return listBulkSendingsAsync(userEmail, limit, page, apiApplicationId, _callback);
        }
    }

    /**
     * List Bulk Sendings
     * Returns information about the Bulk Send.
     * @return ListBulkSendingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ListBulkSendingsRequestBuilder listBulkSendings() throws IllegalArgumentException {
        return new ListBulkSendingsRequestBuilder();
    }
    private okhttp3.Call validateCsvCall(BulkSendCsvRequest bulkSendCsvRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkSendCsvRequest;

        // create path and map variables
        String localVarPath = "/api/v1/bulk_sends/validate_csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateCsvValidateBeforeCall(BulkSendCsvRequest bulkSendCsvRequest, final ApiCallback _callback) throws ApiException {
        return validateCsvCall(bulkSendCsvRequest, _callback);

    }


    private ApiResponse<BulkSendValidateCsvResponse> validateCsvWithHttpInfo(BulkSendCsvRequest bulkSendCsvRequest) throws ApiException {
        okhttp3.Call localVarCall = validateCsvValidateBeforeCall(bulkSendCsvRequest, null);
        Type localVarReturnType = new TypeToken<BulkSendValidateCsvResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateCsvAsync(BulkSendCsvRequest bulkSendCsvRequest, final ApiCallback<BulkSendValidateCsvResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateCsvValidateBeforeCall(bulkSendCsvRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkSendValidateCsvResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateCsvRequestBuilder {
        private final List<UUID> templateIds;
        private final byte[] bulkSendCsv;

        private ValidateCsvRequestBuilder(List<UUID> templateIds, byte[] bulkSendCsv) {
            this.templateIds = templateIds;
            this.bulkSendCsv = bulkSendCsv;
        }

        /**
         * Build call for validateCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkSendCsvRequest bulkSendCsvRequest = buildBodyParams();
            return validateCsvCall(bulkSendCsvRequest, _callback);
        }

        private BulkSendCsvRequest buildBodyParams() {
            BulkSendCsvRequest bulkSendCsvRequest = new BulkSendCsvRequest();
            bulkSendCsvRequest.templateIds(this.templateIds);
            bulkSendCsvRequest.bulkSendCsv(this.bulkSendCsv);
            return bulkSendCsvRequest;
        }

        /**
         * Execute validateCsv request
         * @return BulkSendValidateCsvResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public BulkSendValidateCsvResponse execute() throws ApiException {
            BulkSendCsvRequest bulkSendCsvRequest = buildBodyParams();
            ApiResponse<BulkSendValidateCsvResponse> localVarResp = validateCsvWithHttpInfo(bulkSendCsvRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateCsv request with HTTP info returned
         * @return ApiResponse&lt;BulkSendValidateCsvResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkSendValidateCsvResponse> executeWithHttpInfo() throws ApiException {
            BulkSendCsvRequest bulkSendCsvRequest = buildBodyParams();
            return validateCsvWithHttpInfo(bulkSendCsvRequest);
        }

        /**
         * Execute validateCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkSendValidateCsvResponse> _callback) throws ApiException {
            BulkSendCsvRequest bulkSendCsvRequest = buildBodyParams();
            return validateCsvAsync(bulkSendCsvRequest, _callback);
        }
    }

    /**
     * Validate Bulk Send CSV
     * Validates a Bulk Send CSV file before creating the Bulk Send. It will check the structure of the CSV and the data it contains, and return any errors found.
     * @return ValidateCsvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ValidateCsvRequestBuilder validateCsv(List<UUID> templateIds, byte[] bulkSendCsv) throws IllegalArgumentException {
        if (templateIds == null) throw new IllegalArgumentException("\"templateIds\" is required but got null");
        if (bulkSendCsv == null) throw new IllegalArgumentException("\"bulkSendCsv\" is required but got null");
        return new ValidateCsvRequestBuilder(templateIds, bulkSendCsv);
    }
}
