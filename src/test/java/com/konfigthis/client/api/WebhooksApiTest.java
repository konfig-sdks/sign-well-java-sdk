/*
 * Resources and endpoints
 * When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.  At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.  The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.  Ruben Gamez Founder, SignWell
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.util.UUID;
import com.konfigthis.client.model.WebhooksGetAllResponseInner;
import com.konfigthis.client.model.WebhooksRegisterCallbackUrlRequest;
import com.konfigthis.client.model.WebhooksRegisterCallbackUrlResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private static WebhooksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebhooksApi(apiClient);
    }

    /**
     * Delete Webhook
     *
     * Deletes a registered callback URL that we are posting document events to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCallbackUrlTest() throws ApiException {
        UUID id = null;
        api.deleteCallbackUrl(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Webhooks
     *
     * List all the webhooks in the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        List<WebhooksGetAllResponseInner> response = api.getAll()
                .execute();
        // TODO: test validations
    }

    /**
     * Create Webhook
     *
     * Register a callback URL that we will post document events to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerCallbackUrlTest() throws ApiException {
        String callbackUrl = null;
        UUID apiApplicationId = null;
        WebhooksRegisterCallbackUrlResponse response = api.registerCallbackUrl(callbackUrl)
                .apiApplicationId(apiApplicationId)
                .execute();
        // TODO: test validations
    }

}
